autoparser::impl_scanner! {
  Whitespace @regex => "^(?<__>\\s)",

  LeftBrace => "{",
  RightBrace => "}",
  LeftBracket => "[",
  RightBracket => "]",
  Comma => ",",
  Colon => ":",

  Null => "null",
  String { content: String } @regex => "^\"(?<content>([^\"]*))\"",
  BoolValue { value: bool } @regex => "^(?<value>true|false)",

  Eof => "",
}

pub mod ast {
    use autoparser::NoToken;

    use super::*;

    autoparser::impl_rules! {
      OpenBrace => Token::LeftBrace,
      CloseBrace => Token::RightBrace,
      OpenBracket => Token::LeftBracket,
      CloseBracket => Token::RightBracket,

      Comma => Token::Comma,
      Colon => Token::Colon,

      StringValue { content: String } => Token::String { content },
      BoolValue { value: bool } => Token::BoolValue { value },
      NullValue => Token::Null,
      enum Value => StringValue | BoolValue | NullValue,

      Root { expr: Expr } => (expr, Token::Eof),
      enum Expr => Value | Object | Array,

      Array { content: ArrayContent } => (OpenBracket {}, content, CloseBracket {}),
      enum ArrayContent => ArrayField | NoToken,
      ArrayField { value: Box<Expr>, next: Box<ArrayNext> } => (value, next),
      ArrayNextField { next: Box<ArrayField> } => (Comma {}, next),
      enum ArrayNext => ArrayNextField | NoToken,

      Object { content: ObjectContent } => (OpenBrace {}, content, CloseBrace {}),
      enum ObjectContent => ObjectField | NoToken,
      ObjectField { key: StringValue, value: Box<Expr>, next: Box<ObjectNext> } => (key, Colon {}, value, next),
      ObjectNextField { next: Box<ObjectField> } => (Comma {}, next),
      enum ObjectNext => ObjectNextField | NoToken,
    }
}

use autoparser::{Parse, Source, TokenStream};

fn main() {
    let source = Source {
        name: Some("https://json.org/example.html"),
        content: r#"
{
    "glossary": {
        "title": "example glossary",
		"GlossDiv": {
            "title": "S",
			"GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
					"SortAs": "SGML",
					"GlossTerm": "Standard Generalized Markup Language",
					"Acronym": "SGML",
					"Abbrev": "ISO 8879:1986",
					"GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
						"GlossSeeAlso": ["GML", "XML"]
                    },
					"GlossSee": "markup"
                }
            }
        }
    }
}
        "#
        .into(),
    };

    // Generated by impl_scanner!(..)
    let scanner = Scanner::new();

    let mut scan = scanner
        .scan(source)
        .unwrap()
        .into_iter()
        .filter(|t| t != &Token::Whitespace)
        .collect::<Vec<_>>();

    scan.push(Token::Eof);

    let mut tokens = TokenStream::new(&scan); // or (&scan).into()

    // Generated by impl_rules!(..)
    let ast_result = ast::Root::try_parse(&mut tokens); // or tokens.try_parse::<ast::Expr>()

    println!("{ast_result:#?}");
}
