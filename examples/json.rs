autoparser::impl_scanner! {
  Whitespace @regex => "^(?<__>\\s)",

  LeftBrace => "{",
  RightBrace => "}",
  LeftBracket => "[",
  RightBracket => "]",
  Comma => ",",
  Colon => ":",

  Null => "null",
  String { content: String } @regex => "^\"(?<content>([^\"]*))\"",
  Bool { value: bool } @regex => "^(?<value>true|false)",
  Int { number: u32 } @regex => "^(?<number>(\\d)+)",

  Eof => "",
}

pub mod ast {
    use autoparser::NoToken;

    use super::*;

    autoparser::impl_rules! {
      OpenBrace => Token::LeftBrace,
      CloseBrace => Token::RightBrace,
      OpenBracket => Token::LeftBracket,
      CloseBracket => Token::RightBracket,

      Comma => Token::Comma,
      Colon => Token::Colon,

      StringValue { content: String } => Token::String { content },
      BoolValue { value: bool } => Token::Bool { value },
      IntValue { number: u32 } => Token::Int { number },
      NullValue => Token::Null,
      enum Value => StringValue | BoolValue | IntValue | NullValue,

      Root { expr: Expr } => (expr, Token::Eof),
      enum Expr => Value | Object | Array,

      Array { content: ArrayContent } => (OpenBracket {}, content, CloseBracket {}),
      enum ArrayContent => ArrayField | NoToken,
      ArrayField { value: Box<Expr>, next: Box<ArrayNext> } => (value, next),
      ArrayNextField { next: Box<ArrayField> } => (Comma {}, next),
      enum ArrayNext => ArrayNextField | NoToken,

      Object { content: ObjectContent } => (OpenBrace {}, content, CloseBrace {}),
      enum ObjectContent => ObjectField | NoToken,
      ObjectField { key: StringValue, value: Box<Expr>, next: Box<ObjectNext> } => (key, Colon {}, value, next),
      ObjectNextField { next: Box<ObjectField> } => (Comma {}, next),
      enum ObjectNext => ObjectNextField | NoToken,
    }
}

use autoparser::{Parse, Source, TokenStream};

fn main() {
    let source = Source {
        name: Some("https://json.org/example.html"),
        content: TEST_JSON,
    };

    // Generated by impl_scanner!(..)
    let scanner = Scanner::new();

    let mut scan = scanner
        .scan(source)
        .unwrap()
        .into_iter()
        .filter(|t| t != &Token::Whitespace)
        .collect::<Vec<_>>();

    scan.push(Token::Eof);

    let mut tokens = TokenStream::new(&scan); // or (&scan).into()

    // Generated by impl_rules!(..)
    let ast_result = ast::Root::try_parse(&mut tokens); // or tokens.try_parse::<ast::Expr>()

    println!("{ast_result:#?}");
}

const TEST_JSON: &str = r#"
{"web-app": {
  "servlet": [   
    {
      "servlet-name": "cofaxCDS",
      "servlet-class": "org.cofax.cds.CDSServlet",
      "init-param": {
        "configGlossary:installationAt": "Philadelphia, PA",
        "configGlossary:adminEmail": "ksm@pobox.com",
        "configGlossary:poweredBy": "Cofax",
        "configGlossary:poweredByIcon": "/images/cofax.gif",
        "configGlossary:staticPath": "/content/static",
        "templateProcessorClass": "org.cofax.WysiwygTemplate",
        "templateLoaderClass": "org.cofax.FilesTemplateLoader",
        "templatePath": "templates",
        "templateOverridePath": "",
        "defaultListTemplate": "listTemplate.htm",
        "defaultFileTemplate": "articleTemplate.htm",
        "useJSP": false,
        "jspListTemplate": "listTemplate.jsp",
        "jspFileTemplate": "articleTemplate.jsp",
        "cachePackageTagsTrack": 200,
        "cachePackageTagsStore": 200,
        "cachePackageTagsRefresh": 60,
        "cacheTemplatesTrack": 100,
        "cacheTemplatesStore": 50,
        "cacheTemplatesRefresh": 15,
        "cachePagesTrack": 200,
        "cachePagesStore": 100,
        "cachePagesRefresh": 10,
        "cachePagesDirtyRead": 10,
        "searchEngineListTemplate": "forSearchEnginesList.htm",
        "searchEngineFileTemplate": "forSearchEngines.htm",
        "searchEngineRobotsDb": "WEB-INF/robots.db",
        "useDataStore": true,
        "dataStoreClass": "org.cofax.SqlDataStore",
        "redirectionClass": "org.cofax.SqlRedirection",
        "dataStoreName": "cofax",
        "dataStoreDriver": "com.microsoft.jdbc.sqlserver.SQLServerDriver",
        "dataStoreUrl": "jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon",
        "dataStoreUser": "sa",
        "dataStorePassword": "dataStoreTestQuery",
        "dataStoreTestQuery": "SET NOCOUNT ON;select test='test';",
        "dataStoreLogFile": "/usr/local/tomcat/logs/datastore.log",
        "dataStoreInitConns": 10,
        "dataStoreMaxConns": 100,
        "dataStoreConnUsageLimit": 100,
        "dataStoreLogLevel": "debug",
        "maxUrlLength": 500}},
    {
      "servlet-name": "cofaxEmail",
      "servlet-class": "org.cofax.cds.EmailServlet",
      "init-param": {
      "mailHost": "mail1",
      "mailHostOverride": "mail2"}},
    {
      "servlet-name": "cofaxAdmin",
      "servlet-class": "org.cofax.cds.AdminServlet"},
 
    {
      "servlet-name": "fileServlet",
      "servlet-class": "org.cofax.cds.FileServlet"},
    {
      "servlet-name": "cofaxTools",
      "servlet-class": "org.cofax.cms.CofaxToolsServlet",
      "init-param": {
        "templatePath": "toolstemplates/",
        "log": 1,
        "logLocation": "/usr/local/tomcat/logs/CofaxTools.log",
        "logMaxSize": "",
        "dataLog": 1,
        "dataLogLocation": "/usr/local/tomcat/logs/dataLog.log",
        "dataLogMaxSize": "",
        "removePageCache": "/content/admin/remove?cache=pages&id=",
        "removeTemplateCache": "/content/admin/remove?cache=templates&id=",
        "fileTransferFolder": "/usr/local/tomcat/webapps/content/fileTransferFolder",
        "lookInContext": 1,
        "adminGroupID": 4,
        "betaServer": true}}],
  "servlet-mapping": {
    "cofaxCDS": "/",
    "cofaxEmail": "/cofaxutil/aemail/*",
    "cofaxAdmin": "/admin/*",
    "fileServlet": "/static/*",
    "cofaxTools": "/tools/*"},
 
  "taglib": {
    "taglib-uri": "cofax.tld",
    "taglib-location": "/WEB-INF/tlds/cofax.tld"}}}
"#;
