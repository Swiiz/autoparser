autoparser::impl_scanner! {
  Whitespace @regex => "^(?<__>\\s)",

  LeftParen => "(",
  RightParen => ")",
  Minus => "-",
  Plus => "+",
  Slash => "/",
  Star => "*",

  NumberLiteral { number: u32 } @regex => "^(?<number>(\\d)+)",
  Identifier { name: String } @regex => "^(?<name>([a-zA-Z_][a-zA-Z0-9_]*))",

  Eof => ""
}

pub mod ast {
    use super::*;

    autoparser::impl_rules! {
      AddOperator => Token::Plus,
      SubOperator => Token::Minus,
      MulOperator => Token::Star,
      DivOperator => Token::Slash,

      OpenParen => Token::LeftParen,
      CloseParen => Token::RightParen,

      Literal { number: u32 } => Token::NumberLiteral { number },
      Identifier { name: String } => Token::Identifier { name },

      Expr { term: Term } => (term, Token::Eof),
      Group { expr: Box<Term> } => (OpenParen {}, expr, CloseParen {}),

      enum Term => AddOperation | SubOperation | Factor,
      AddOperation { left: Factor, right: Box<Term> } => (left, AddOperator {}, right),
      SubOperation { left: Factor, right: Box<Term> } => (left, SubOperator {}, right),

      enum Factor => MulOperation | DivOperation | Unary,
      MulOperation { left: Unary, right: Box<Term> } => (left, MulOperator {}, right),
      DivOperation { left: Unary, right: Box<Term> } => (left, DivOperator {}, right),

      enum Unary => InverseOperation | Primary,
      InverseOperation { primary: Primary } => (SubOperator {}, primary),

      enum Primary => Literal | Identifier | Group,
    }
}

use autoparser::{Parse, Source, TokenStream};

fn main() {
    let source = Source {
        name: None,
        content: "1 + (4 - 3) * -2".into(),
    };

    // Generated by impl_scanner!(..)
    let scanner = Scanner::new();

    let mut scan = scanner
        .scan(source)
        .unwrap()
        .into_iter()
        .filter(|t| t != &Token::Whitespace)
        .collect::<Vec<_>>();

    scan.push(Token::Eof);

    let mut tokens = TokenStream::new(&scan); // or (&scan).into()

    // Generated by impl_rules!(..)
    let ast_result = ast::Expr::try_parse(&mut tokens); // or tokens.try_parse::<ast::Expr>()

    println!("{ast_result:#?}");
}
